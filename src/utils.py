{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOwoCL8iOOZIaYcKE4vRsCY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Jch7fBw-l3Cv"},"outputs":[],"source":["# src/utils.py\n","import os\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import accuracy_score, f1_score, classification_report, confusion_matrix\n","\n","labels = [\"negative\",\"neutral\",\"positive\"]\n","\n","def evaluate(y_true, y_pred):\n","    return {\n","        \"acc\": accuracy_score(y_true, y_pred),\n","        \"f1_macro\": f1_score(y_true, y_pred, average=\"macro\")\n","    }\n","\n","def report_and_cm(y_true, y_pred, title_prefix=\"\", save_dir=None, normalize=False):\n","    print(classification_report(y_true, y_pred, digits=4, target_names=LABELS))\n","    cm = confusion_matrix(y_true, y_pred, labels=[0,1,2])\n","    if normalize:\n","        cm = cm.astype(np.float32) / cm.sum(axis=1, keepdims=True).clip(min=1)\n","    fig, ax = plt.subplots(figsize=(5,4))\n","    im = ax.imshow(cm)\n","    ax.set_xticks(range(3)); ax.set_yticks(range(3))\n","    ax.set_xticklabels(LABELS); ax.set_yticklabels(LABELS)\n","    for i in range(3):\n","        for j in range(3):\n","            txt = f\"{cm[i,j]:.2f}\" if normalize else f\"{int(cm[i,j])}\"\n","            ax.text(j,i,txt,ha=\"center\",va=\"center\")\n","    ax.set_xlabel(\"Predicción\"); ax.set_ylabel(\"Real\")\n","    ax.set_title(f\"{title_prefix} Matriz de confusión {'(norm.)' if normalize else ''}\")\n","    plt.tight_layout()\n","    if save_dir:\n","        os.makedirs(save_dir, exist_ok=True)\n","        fname = f\"{title_prefix.lower().replace(' ','_')}{'_norm' if normalize else '_counts'}.png\"\n","        path = os.path.join(save_dir, fname)\n","        plt.savefig(path, dpi=300)\n","        print(\"Guardado:\", path)\n","    plt.show()\n","\n","def save_performance(rows, path_csv):\n","    df = pd.DataFrame(rows)\n","    os.makedirs(os.path.dirname(path_csv), exist_ok=True)\n","    df.to_csv(path_csv, index=False)\n","    return df\n"]}]}